/*
	http 내장 모듈로만은 완전한 웹서버를 구축하기에는 너무나 부족하다. 따라서 
	express모듈을 사용해봅시다.
	express모듈은 웹서버 구축에 필요한 기능들을 위해 http모듈에 
	추가시켜놓은 외부모듈.... (http의 업그레이드 모듈) but 2모듈은 같이 사용해야 한다.
*/

var http=require("http");//내
var express=require("express");//외
var fs=require("fs");//내
var data;
var mysql=require("mysql");//외
//express 모듈로부터  application 객체를 반환 생성해야 한다. 
var app=express();

//mysql서버에 접속

var client=mysql.createConnection({
	"url":"localhost",
	"user":"root",
	"password":""
});
client.query("use iot");//사용할 db선택
/*application : 웹서버 역할을 담당할 객체
웹서버의 역할은 ?  요청에 대한 응답을 위한 객체
app.use(function(request,response){
	response.writeHead(200,{"Content-Type":"text/html;charset=utf8"});
	data=fs.readFileSync("");
	response.end("express 모듈로 구축한 서버의 메세지");
});
app.use()메서드 안에는 미들웨어라 불리는 각종 express 지원 함수들이 자리잡을 수 있다.

미들 웨어를 사용해본다. route란 방향을 잡는 것을 말하고
nodejs에서는 원하는 페이지를 나오게 처리해준다.
app.use(app.router);//라우팅시 함수() 표시 X
클라이언트가 get방식으로 요청을 시도하면 동작하게 될 메서드!!!(서버로부터 무언가를 가져가는 방식이  get 방식)*/
app.route("/regist_form").get(function(request,response){
	response.writeHead(200,{"Content-Type":"text/html; charset=utf8"});
	data=fs.readFileSync("./regist_form.html","utf8");
	response.end(data);
});
//클라이언트가 등록을 원하면  ...... post방식으로 요청할 경우
//서버에서는 post() 메서드로 받아야 한다.!!
app.route("/regit").post(function(request,response){//클라이언트에 보낸 데이터를 받고
	var id="xman";//express모듈 사용시 request 가 업그레이드 되서 param 메서드를 사용할수 있다.
	var pwd="4631";
	var name="엑스맨";
	console.log("넘겨 받은 아이디는 ?"+id);
	console.log("넘겨 받은 패스워드는 ?"+pwd);
	console.log("넘겨 받은 이름은?"+name);//데이터 베이스에 넣는다.
	client.query("insert into student(id,pwd,name) values('"+id+"','"+pwd+"','"+name+"')",function(error,records,field){
		//쿼리문 수행후 두번째 인수 익명함수가 작동한다.성공여부 확인 위해
		if(error){
			console.log("등록 실패입니다.");
		}else{
			console.log("성공입니다.");
		}
	});

});
//서버 생성
var server=http.createServer(app);

server.listen(8383,function(){
	console.log("server is runninig at 8383.......");
});